//=====================================================================================================================
// Решение: LotusPlatform
// Раздел: Модуль чертежной графики
// Подраздел: Общая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusCADBaseEntity.cs
*		Определение базовой сущности объекта модуля чертежной графики.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace CAD
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \defgroup CadDrawing Модуль чертежной графики
		//! Модуль чертежной графики обеспечивает возможность векторного черчения и управления визуальными примитивами,
		//! графическими элементами, фигурами, экспорта и печати чертежа
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип сущности модуля чертежной графики
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[TypeConverter(typeof(EnumToStringConverter<TCadEntityType>))]
		public enum TCadEntityType
		{
			/// <summary>
			/// Базовая сущность
			/// </summary>
			[Description("СУЩНОСТЬ")]
			Entity,

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			//
			// ОБЪЕКТЫ ПРЕДСТАВЛЕНИЯ
			//
			///////////////////////////////////////////////////////////////////////////////////////////////////////////

			/// <summary>
			/// Графический объект
			/// </summary>
			[Description("ОБЪЕКТ")]
			Object,

			/// <summary>
			/// Графическая фигура
			/// </summary>
			[Description("ФИГУРА")]
			Shape,

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			//
			// СЛОЙ
			//
			///////////////////////////////////////////////////////////////////////////////////////////////////////////

			/// <summary>
			/// Слой
			/// </summary>
			[Description("СЛОЙ")]
			Layer,

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			//
			// ОБЪЕКТЫ ХРАНЕНИЯ ДАННЫХ
			//
			///////////////////////////////////////////////////////////////////////////////////////////////////////////

			/// <summary>
			/// Чертеж
			/// </summary>
			[Description("ЧЕРТЕЖ")]
			Draft,

			/// <summary>
			/// Проект
			/// </summary>
			[Description("ПРОЕКТ")]
			Project,

			///////////////////////////////////////////////////////////////////////////////////////////////////////////
			//
			// ГРАФИЧЕСКИЕ РЕСУРСЫ
			//
			///////////////////////////////////////////////////////////////////////////////////////////////////////////

			/// <summary>
			/// Кисть
			/// </summary>
			[Description("КИСТЬ")]
			Brush,

			/// <summary>
			/// Перо
			/// </summary>
			[Description("ПЕРО")]
			Pen,

			/// <summary>
			/// Стиль пера
			/// </summary>
			[Description("СТИЛЬ ПЕРА")]
			PenStyle,

			/// <summary>
			/// Шрифт
			/// </summary>
			[Description("ШРИФТ")]
			Font
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для определения сущности модуля чертежной графики
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ICadEntity : ILotusNameable, ILotusViewItemBuilder, ILotusBeforeSave, ILotusAfterSave,
			ILotusBeforeLoad, ILotusAfterLoad, ILotusCheckOne<ICadEntity>, INotifyCollectionChanged
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Тип сущности модуля чертежной графики
			/// </summary>
			TCadEntityType EntityType { get; }

			/// <summary>
			/// Уникальный идентификатор сущности
			/// </summary>
			Int64 Id { get; set; }
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс предоставляющий собой базовую сущность модуля чертежной графики
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[DataContract]
		public abstract class CCadEntity : CNameable, ICadEntity
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			protected static PropertyChangedEventArgs PropertyArgsId = new PropertyChangedEventArgs(nameof(Id));
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			// Идентификация
			protected internal Int64 mId;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ИДЕНТИФИКАЦИЯ
			//
			/// <summary>
			/// Уникальный идентификатор сущности
			/// </summary>
			[DisplayName("Группа")]
			[Description("Уникальный идентификатор сущности")]
			[Category(XInspectorGroupDesc.ID)]
			[LotusPropertyOrder(100)]
			[LotusCategoryOrder(0)]
			[Display(GroupName = XInspectorGroupDesc.ID, Order = 100)]
			[DataMember]
			public Int64 Id
			{
				get { return (mId); }
				set
				{
					if (value == -1)
					{
						mId = XGenerateId.Generate(this);
					}
					else
					{
						mId = value;
					}

					NotifyPropertyChanged(PropertyArgsId);
				}
			}

			/// <summary>
			/// Тип сущности модуля чертежной графики
			/// </summary>
			[DisplayName("Тип объекта")]
			[Description("Тип сущности модуля чертежной графики")]
			[Category(XInspectorGroupDesc.ID)]
			[LotusPropertyOrder(3)]
			[Display(GroupName = XInspectorGroupDesc.ID, Order = 3)]
			public virtual TCadEntityType EntityType
			{
				get 
				{
					return (TCadEntityType.Entity);
				}
			}

			/// <summary>
			/// Статус константного объекта
			/// </summary>
			[Browsable(false)]
			public virtual Boolean IsConst
			{
				get 
				{
					return (mId < XCadSettings.ConstObjectFromID);
				}
			}

			/// <summary>
			/// Обработчик события изменения коллекции
			/// </summary>
			[Browsable(false)]
			public virtual event NotifyCollectionChangedEventHandler CollectionChanged
			{
				add { }
				remove { }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			protected CCadEntity()
				: base(String.Empty)
			{
				mId = XGenerateId.Generate(this);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя сущности</param>
			//---------------------------------------------------------------------------------------------------------
			protected CCadEntity(String name)
				: base(name)
			{
				mId = XGenerateId.Generate(this);
			}
			#endregion

			#region ======================================= СИСТЕМНЫЕ МЕТОДЫ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Преобразование к текстовому представлению
			/// </summary>
			/// <returns>Наименование сущности</returns>
			//---------------------------------------------------------------------------------------------------------
			public override String ToString()
			{
				return (mName);
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusViewItemBuilder ==============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение количества дочерних узлов
			/// </summary>
			/// <returns>Количество дочерних узлов</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Int32 GetCountChildrenNode()
			{
				return (0);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение дочернего узла по индексу
			/// </summary>
			/// <param name="index">Индекс дочернего узла</param>
			/// <returns>Дочерней узел</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual System.Object GetChildrenNode(Int32 index)
			{
				return (null);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка объекта на удовлетворение указанного предиката
			/// </summary>
			/// <remarks>
			/// Объект удовлетворяет условию предиката если хотя бы один его элемент удовлетворяет условию предиката
			/// </remarks>
			/// <param name="match">Предикат проверки</param>
			/// <returns>Статус проверки</returns>
			//---------------------------------------------------------------------------------------------------------
			public virtual Boolean CheckOne(Predicate<ICadEntity> match)
			{
				return (match(this));
			}
			#endregion

			#region ======================================= МЕТОДЫ ИНТЕРФЕЙСОВ СОХРАНЕНИЯ/ЗАГРУЗКИ ====================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Подготовка элемента перед сохранением
			/// </summary>
			/// <param name="parameters">Параметры контекста</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnBeforeSave(CParameters parameters)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Восстановление параметров элемента после сохранения
			/// </summary>
			/// <param name="parameters">Параметры контекста</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnAfterSave(CParameters parameters)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Подготовка элемента перед загрузкой
			/// </summary>
			/// <param name="parameters">Параметры контекста</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnBeforeLoad(CParameters parameters)
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Восстановление параметров элемента после загрузки
			/// </summary>
			/// <param name="parameters">Параметры контекста</param>
			//---------------------------------------------------------------------------------------------------------
			public virtual void OnAfterLoad(CParameters parameters)
			{
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================