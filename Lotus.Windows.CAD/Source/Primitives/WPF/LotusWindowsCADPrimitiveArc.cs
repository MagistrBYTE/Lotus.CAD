//=====================================================================================================================
// Решение: LotusPlatform
// Раздел: Модуль чертежной графики
// Подраздел: Графические примитивы
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusWindowsCADPrimitiveArc.cs
*		Графический примитив дуги.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;
using System.Windows.Media;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
using Lotus.Maths;
//=====================================================================================================================
namespace Lotus
{
	namespace CAD
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CadPrimitivs
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Графический примитив дуги
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CCadWindowsPrimitiveArc : CCadPrimitiveArc
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			internal StreamGeometry mGeometryArc;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CCadWindowsPrimitiveArc()
			{
				mGeometryArc = new StreamGeometry();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="start_point">Начальная точка</param>
			/// <param name="radius_x">Радиус дуги по X</param>
			/// <param name="radius_y">Радиус дуги по Y</param>
			/// <param name="end_point">Конечная точка</param>
			//---------------------------------------------------------------------------------------------------------
			public CCadWindowsPrimitiveArc(Vector2Df start_point, Single radius_x, Single radius_y, Vector2Df end_point)
			{
				mStartPoint = start_point;
				mRadiusX = radius_x;
				mRadiusY = radius_y;
				mEndPoint = end_point;
				mGeometryArc = new StreamGeometry();
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление данных отображения контура примитива
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void UpdateIsStroked()
			{
				Update();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление данных отображения заливки примитива
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void UpdateIsFilled()
			{
				Update();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление данных дуги
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void Update()
			{
				using (StreamGeometryContext sgc = mGeometryArc.Open())
				{
					sgc.BeginFigure(mStartPoint.ToWinPoint(), mIsFilled, mIsClosed);

					sgc.ArcTo(mEndPoint.ToWinPoint(), new Size(mRadiusX, mRadiusY), mRotationAngle, mIsLargeArc,
						mIsClockwiseDirection ? SweepDirection.Clockwise : SweepDirection.Counterclockwise, mIsStroked, true);

					sgc.Close();
				}

				mBoundsRect = mGeometryArc.Bounds.ToRect();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Копирование графического примитива
			/// </summary>
			/// <returns>Дубликат графического примитива со всеми параметрами и данными</returns>
			//---------------------------------------------------------------------------------------------------------
			public override CCadPrimitive Duplicate()
			{
				CCadWindowsPrimitiveArc arc = new CCadWindowsPrimitiveArc();
				arc.CopyParamemtrs(this);
				arc.Update();
				return (arc);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Копирование параметров с графического примитива
			/// </summary>
			/// <param name="primitiv">Графический примитив</param>
			//---------------------------------------------------------------------------------------------------------
			public override void CopyParamemtrs(CCadPrimitive primitiv)
			{
				base.CopyParamemtrs(primitiv);

				CCadPrimitiveArc source = primitiv as CCadPrimitiveArc;
				mStartPoint = source.mStartPoint;
				mEndPoint = source.mEndPoint;
				mIsLargeArc = source.mIsLargeArc;
				mIsClockwiseDirection = source.mIsClockwiseDirection;
				mRotationAngle = source.mRotationAngle;
				mRadiusX = source.mRadiusX;
				mRadiusY = source.mRadiusY;
				mIsClosed = source.mIsClosed;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка раположения точки на контуре графического примитива
			/// </summary>
			/// <param name="point">Проверяемая точка</param>
			/// <param name="thickness">Толщина контура</param>
			/// <returns>Статус расположения</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean StrokeContains(ref Vector2Df point, Single thickness)
			{
				return (mGeometryArc.StrokeContains(mStroke.WindowsPen, new Point(point.X, point.Y)));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Проверка раположения точки внутри области графического примитива
			/// </summary>
			/// <param name="point">Проверяемая точка</param>
			/// <returns>Статус расположения</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Boolean FillContains(ref Vector2Df point)
			{
				return (mGeometryArc.FillContains(new Point(point.X, point.Y)));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вычисление площади графического примитива
			/// </summary>
			/// <returns>Площадь графического примитива</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Double ComputeArea()
			{
				return (mGeometryArc.GetArea());
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вычисление ограничивающего прямоугольника графического примитива
			/// </summary>
			/// <param name="dest_bounds_rect">Прямоугольник</param>
			//---------------------------------------------------------------------------------------------------------
			public override void ComputeBounds(ref Rect2Df dest_bounds_rect)
			{
				dest_bounds_rect = mGeometryArc.Bounds.ToRect();
			}
			#endregion

			#region ======================================= МЕТОДЫ РИСОВАНИЯ ==========================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Рисование дуги
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void Draw()
			{
				//LotusCadCanvas.DrawingDevice.DrawGeometry(mIsFilled ? mFill.WindowsBrush : null,
				//						mIsStroked ? Stroke.WindowsPen : null, mGeometryArc);
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================