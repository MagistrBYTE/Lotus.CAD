//=====================================================================================================================
// Решение: LotusPlatform
// Раздел: Модуль чертежной графики
// Подраздел: Общая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusCADMemento.cs
*		Определение подсистемы хранения состояния.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.ComponentModel;
using System.Collections.ObjectModel;
using System.Globalization;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Xml;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
using System.Reflection;
//=====================================================================================================================
namespace Lotus
{
	namespace CAD
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CadDrawing
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс реализующий смотрителя за объектом при добавление объекта
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CMementoCaretakerAdd : ILotusMementoState
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			internal ICadObject mElement;
			internal ICadCanvasViewer mCanvasViewer;
			internal Boolean mIsCanvas;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			/// <remarks>
			/// Конструктор без параметров запрещен
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			private CMementoCaretakerAdd()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="canvas_viewer">Канва</param>
			/// <param name="element">Элемент</param>
			//---------------------------------------------------------------------------------------------------------
			public CMementoCaretakerAdd(ICadCanvasViewer canvas_viewer, ICadObject element)
			{
				mCanvasViewer = canvas_viewer;
				mElement = element;
				mIsCanvas = element.IsCanvas;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Undo()
			{
				if(mCanvasViewer != null && mElement != null)
				{
					if (mIsCanvas)
					{
						mCanvasViewer.RemoveObject(mElement);
					}
					else
					{
						if (mCanvasViewer.Draft != null)
						{
							mCanvasViewer.Draft.Elements.Remove(mElement);
						}
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Повторение последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Redo()
			{
				if (mCanvasViewer != null && mElement != null)
				{
					if(mIsCanvas)
					{
						mCanvasViewer.AddObject(mElement);
					}
					else
					{
						if (mCanvasViewer.Draft != null)
						{
							mCanvasViewer.Draft.Elements.Add(mElement);
						}
					}
				}
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс реализующий смотрителя за объектом при удалении объекта
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CMementoCaretakerRemove : ILotusMementoState
		{
			#region ======================================= ДАННЫЕ ====================================================
			// Общие данные
			internal ICadObject mElement;
			internal ICadCanvasViewer mCanvasViewer;
			internal Boolean mIsCanvas;
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			/// <remarks>
			/// Конструктор без параметров запрещен
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			private CMementoCaretakerRemove()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="canvas_viewer">Канва</param>
			/// <param name="element">Элемент</param>
			//---------------------------------------------------------------------------------------------------------
			public CMementoCaretakerRemove(ICadCanvasViewer canvas_viewer, ICadObject element)
			{
				mCanvasViewer = canvas_viewer;
				mElement = element;
				mIsCanvas = element.IsCanvas;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Undo()
			{
				if (mCanvasViewer != null && mElement != null)
				{
					if (mIsCanvas)
					{
						mCanvasViewer.AddObject(mElement);
					}
					else
					{
						if (mCanvasViewer.Draft != null)
						{
							mCanvasViewer.Draft.Elements.Add(mElement);
						}
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Повторение последнего действия
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void Redo()
			{
				if (mCanvasViewer != null && mElement != null)
				{
					if (mIsCanvas)
					{
						mCanvasViewer.RemoveObject(mElement);
					}
					else
					{
						if (mCanvasViewer.Draft != null)
						{
							mCanvasViewer.Draft.Elements.Remove(mElement);
						}
					}
				}
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================