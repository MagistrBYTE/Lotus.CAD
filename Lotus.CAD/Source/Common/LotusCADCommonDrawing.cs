//=====================================================================================================================
// Решение: LotusPlatform
// Раздел: Модуль чертежной графики
// Подраздел: Общая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusCADCommonDrawing.cs
*		Реализация общей функциональности модуля чертежной графики.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 30.01.2022
//=====================================================================================================================
using System;
using System.Xml;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Reflection;
using System.ComponentModel;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Maths;
//=====================================================================================================================
namespace Lotus
{
	namespace CAD
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup CadDrawing
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Статический класс для реализации дополнительной функциональности модуля чертежной графики
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public static class XCadDrawing
		{
			#region ======================================= ДАННЫЕ ====================================================
			/// <summary>
			/// Коэффициент для перевода значения в аппаратно-независимых единиц в миллиметры
			/// </summary>
			public static Single UnitToMM = 0.26458f;

			/// <summary>
			/// Коэффициент для перевода значения в аппаратно-независимых единиц в сантиметры
			/// </summary>
			public static Single UnitToСM = 0.026458f;

			/// <summary>
			/// Коэффициент для перевода значения в миллиметрах в аппаратно-независимые единицы
			/// </summary>
			public static Single MMToUnit = 3.77952f;

			/// <summary>
			/// Коэффициент для перевода значения в сантиметрах в аппаратно-независимые единицы
			/// </summary>
			public static Single CMToUnit = 37.7952f;
			#endregion

			#region ======================================= МЕТОДЫ ПРЕОБРАЗОВАНИЯ ЕДИНИЦ ==============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Базовое сравнение объектов чертежной графики для упорядочивания
			/// </summary>
			/// <param name="a">Первый объект</param>
			/// <param name="b">Второй объект</param>
			/// <returns>Статус сравнения объектов</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Int32 DefaultComprare(ICadEntity a, ICadEntity b)
			{
				// Для константных объектов сравниваем по идентификатору
				if (a.Id < XCadSettings.ConstObjectFromID && b.Id < XCadSettings.ConstObjectFromID)
				{
					if (a.Id < b.Id)
					{
						return (-1);
					}
					else
					{
						if (a.Id > b.Id)
						{
							return (1);
						}
						else
						{
							return (a.Name.CompareTo(b.Name));
						}
					}
				}
				else
				{
					return (a.Name.CompareTo(b.Name));
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод значения в миллиметрах в аппаратно-независимые единицы
			/// </summary>
			/// <param name="millimeter">Значение в миллиметрах</param>
			/// <returns>Значение в аппаратно-независимых единицах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Single ToDeviceUnits(Single millimeter)
			{
				return (millimeter * MMToUnit);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод вектора в миллиметрах в аппаратно-независимые единицы
			/// </summary>
			/// <param name="millimeter">Вектор в миллиметрах</param>
			/// <returns>Вектор в аппаратно-независимых единицах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Vector2Df ToDeviceUnits(ref Vector2Df millimeter)
			{
				return (new Vector2Df(millimeter.X * MMToUnit, millimeter.Y * MMToUnit));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод размера в миллиметрах в аппаратно-независимые единицы
			/// </summary>
			/// <param name="millimeter">Размер в миллиметрах</param>
			/// <returns>Размер в аппаратно-независимых единицах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Size2Df ToDeviceUnits(ref Size2Df millimeter)
			{
				return (new Size2Df(millimeter.Width * MMToUnit, millimeter.Height * MMToUnit));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод прямоугольника в миллиметрах в аппаратно-независимые единицы
			/// </summary>
			/// <param name="millimeter">Прямоугольник в миллиметрах</param>
			/// <returns>Прямоугольник в аппаратно-независимых единицах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Rect2Df ToDeviceUnits(ref Rect2Df millimeter)
			{
				return (new Rect2Df(millimeter.X * MMToUnit, millimeter.Y * MMToUnit,
					millimeter.Width * MMToUnit, millimeter.Height * MMToUnit));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод значения в аппаратно-независимых единиц в миллиметры
			/// </summary>
			/// <param name="device_unit">Значение в аппаратно-независимых единицах</param>
			/// <returns>Значение в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Single ToMilliliters(Single device_unit)
			{
				return (device_unit * UnitToMM);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод значения в аппаратно-независимых единиц в миллиметры
			/// </summary>
			/// <param name="device_unit">Значение в аппаратно-независимых единицах</param>
			/// <returns>Значение в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Single ToMillilitersRound(Single device_unit)
			{
				return ((Single)Math.Round(device_unit * UnitToMM, 0));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод вектора в аппаратно-независимых единиц в миллиметры
			/// </summary>
			/// <param name="device_unit">Вектор в аппаратно-независимых единицах</param>
			/// <returns>Вектор в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Vector2Df ToMilliliters(ref Vector2Df device_unit)
			{
				return (device_unit * UnitToMM);
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод вектора в аппаратно-независимых единиц в миллиметры
			/// </summary>
			/// <param name="device_unit">Вектор в аппаратно-независимых единицах</param>
			/// <returns>Вектор в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Vector2Df ToMillilitersRound(Vector2Df device_unit)
			{
				return (new Vector2Df((Single)Math.Round(device_unit.X * UnitToMM, 0), 
					(Single)Math.Round(device_unit.Y * UnitToMM, 0)));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод вектора в аппаратно-независимых единиц в миллиметры
			/// </summary>
			/// <param name="device_unit">Вектор в аппаратно-независимых единицах</param>
			/// <returns>Вектор в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Vector2Df ToMillilitersRound(ref Vector2D device_unit)
			{
				return (new Vector2Df((Single)Math.Round(device_unit.X * UnitToMM, 0),
					(Single)Math.Round(device_unit.Y * UnitToMM, 0)));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод размера в аппаратно-независимых единицах в миллиметры
			/// </summary>
			/// <param name="device_unit">Размер в аппаратно-независимых единицах</param>
			/// <returns>Размер в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Size2Df ToMilliliters(ref Size2Df device_unit)
			{
				return (new Size2Df(device_unit.Width * UnitToMM, device_unit.Height * UnitToMM));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод размера в аппаратно-независимых единицах в миллиметры
			/// </summary>
			/// <param name="device_unit">Размер в аппаратно-независимых единицах</param>
			/// <returns>Размер в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Size2Df ToMilliliters(Size2Df device_unit)
			{
				return (new Size2Df(device_unit.Width * UnitToMM, device_unit.Height * UnitToMM));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод размера в аппаратно-независимых единицах в миллиметры
			/// </summary>
			/// <param name="device_unit">Размер в аппаратно-независимых единицах</param>
			/// <returns>Размер в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Size2Df ToMillilitersRound(Size2Df device_unit)
			{
				return (new Size2Df((Single)Math.Round(device_unit.Width * UnitToMM, 0),
					(Single)Math.Round(device_unit.Height * UnitToMM, 0)));
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Перевод прямоугольника в аппаратно-независимых единицах в миллиметры
			/// </summary>
			/// <param name="device_unit">Прямоугольник в аппаратно-независимых единицах</param>
			/// <returns>Прямоугольник в миллиметрах</returns>
			//---------------------------------------------------------------------------------------------------------
			public static Rect2Df ToMilliliters(ref Rect2Df device_unit)
			{
				return (new Rect2Df(device_unit.X * UnitToMM, device_unit.Y * UnitToMM,
					device_unit.Width * UnitToMM, device_unit.Height * UnitToMM));
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================